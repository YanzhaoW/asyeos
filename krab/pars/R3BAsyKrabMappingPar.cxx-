// --------------------------------------------------------------
// -----              R3BAsyKrabMappingPar source file      -----
// -----  Created 18/04/24 by P. Russotto && E. De Filippo  -----
// --------------------------------------------------------------

#include "R3BAsyKrabMappingPar.h"

#include "FairLogger.h"
#include "FairParamList.h"
#include "R3BLogger.h"

// ---- Standard Constructor ---------------------------------------------------
R3BAsyKrabMappingPar::R3BAsyKrabMappingPar(const char* name, const char* title,
                                           const char* context,
                                           const char* NameInFile)
    : FairParGenericSet(name, title, context),
      fGeoVersion(2024),
      fNameInFile(NameInFile) {}

// ----  Destructor ------------------------------------------------------------
R3BAsyKrabMappingPar::~R3BAsyKrabMappingPar() { clear(); }

// ----  Method clear ----------------------------------------------------------
void R3BAsyKrabMappingPar::clear() {
  status = kFALSE;
  resetInputVersions();
}

// ----  Method putParams ------------------------------------------------------
void R3BAsyKrabMappingPar::putParams(FairParamList* list) {
  R3BLOG(info, "called");
  if (!list) {
    R3BLOG(fatal, "Could not initialize FairParamList");
    return;
  }

  list->add("GeoVersionPar", fGeoVersion);
  R3BLOG(info, "Geometry version: " << fGeoVersion);

  list->add("fxtbox", triggerbox_number_of_boards *
                          triggerbox_number_of_FPGA_per_board * num_channels);
  R3BLOG(info, "Nb of KRAB channel: "
                   << triggerbox_number_of_boards *
                          triggerbox_number_of_FPGA_per_board * num_channels);

  Int_t defzero = 0;
  char name[300];
  for (int s = 0; s < triggerbox_number_of_boards *
                          triggerbox_number_of_FPGA_per_board * num_channels;
       s++) {
    sprintf(name, "xtbox%d", s);
    list->add(name, defzero);
  }
}

// ----  Method getParams ------------------------------------------------------
Bool_t R3BAsyKrabMappingPar::getParams(FairParamList* list) {
  R3BLOG(info, "called");
  if (!list) {
    R3BLOG(fatal, "Could not initialize FairParamList");
    return kFALSE;
  }

  if (!list->fill("GeoVersionPar", &fGeoVersion)) {
    R3BLOG(error, "Could not initialize GeoVersionPar");
    return kFALSE;
  } else {
    R3BLOG(info, "Geometry version: " << fGeoVersion);
  }

  if (!list->fill("fxtbox", fxtbox)) {
    R3BLOG(error, "Could not initialize NbSensorsPar");
    return kFALSE;
  } else {
    R3BLOG(info, "Nb of KRAB channels: "
                     << triggerbox_number_of_boards *
                            triggerbox_number_of_FPGA_per_board * num_channels);
  }

  int CH_KRAB;
  int CH_RING;
  float ANGLE;
  int RING;
  int CITIROCK;
  int CH_CROCK;
  int TB_BOARD;
  int INPUT;
  int FPGA;
  int CH_FPGA;
  int CH_TBOX;  // channel from V2495 BOARD3-INPUT1 not connected
                //+ BOARDS6-5 connected to top input (mezzanine) of V2495
  int CB_BOARD;
  int HV_No;

  std::string dummy;
  std::ifstream fpars(fNameInFile, std::ifstream::in);
  if (!fpars) {
    printf("cannot open file: TBOX-KRAB.map\n");
    exit(1);
  }
  getline(fpars, dummy);
  getline(fpars, dummy);
  for (int ih = 0; ih < 26 * 5 * 6; ih++) {
    fpars >> CH_KRAB >> CH_RING >> ANGLE >> RING >> CITIROCK >> CH_CROCK >>
        TB_BOARD >> INPUT >> FPGA >> CH_FPGA >> CH_TBOX >> CB_BOARD >> HV_No;

    fxtbox[CH_TBOX] = CH_KRAB;
    fxtboxang[CH_TBOX] = ANGLE;
    fxtboxring[CH_TBOX] = RING;
    fxtboxringch[CH_TBOX] = CH_RING;

    fxtboxch[CH_TBOX] = CH_KRAB;
    fxtboxboard[CH_TBOX] = TB_BOARD;
    fxtboxinp[CH_TBOX] = INPUT;
    fxtboxfpga[CH_TBOX] = FPGA;
    fxtboxfpgach[CH_TBOX] = CH_FPGA;
    fxtboxcrock[CH_TBOX] = CITIROCK;
    fxtboxcrockch[CH_TBOX] = CH_CROCK;
    fxring[TB_BOARD - 1][FPGA - 1][CH_FPGA] = RING;
    fxringch[TB_BOARD - 1][FPGA - 1][CH_FPGA] = CH_RING;
    fxringang[TB_BOARD - 1][FPGA - 1][CH_FPGA] = ANGLE;
  }
  char name[300];
  for (int s = 0; s < triggerbox_number_of_boards *
                          triggerbox_number_of_FPGA_per_board * num_channels;
       s++) {
    sprintf(name, "xtbox%d", s);
    sprintf(name, "Sensor%dxtbox%dPar", s, fxtbox[s]);
    Int_t value = fxtbox[s];
    auto check = fillParams(name, &value, list);
    if (check) {
      //                    fIn_use[c - 1][r - 1][s - 1] = 0;
    }
  }
  return kTRUE;
}

Bool_t R3BAsyKrabMappingPar::fillParams(const Text_t* name, Int_t* values,
                                        FairParamList* paramList,
                                        const Int_t nValues) {
  // Copies the data from the list object into the parameter array of type
  // Int_t. The function returns an error, if the array size of the list object
  // is not equal to nValues.
  if (values == 0) {
    return kFALSE;
  }
  auto o = paramList->find(name);
  if (o && strcmp(o->getParamType(), "Int_t") == 0) {
    Int_t l = o->getLength();
    Int_t n = o->getNumParams();

    if (n == nValues) {
      memcpy(values, o->getParamValue(), l);
      return kTRUE;
    } else {
      R3BLOG(error, "Different array sizes for parameter " << name);
      return kFALSE;
    }
  }
  return kFALSE;
}

// ----  Method print ----------------------------------------------------------
void R3BAsyKrabMappingPar::print() { printParams(); }

// ----  Method printParams ----------------------------------------------------
void R3BAsyKrabMappingPar::printParams() {
  /*
      R3BLOG(info, "Nb Sensors: " << fNbSensors);
      for (Int_t s = 0; s < fNbSensors; s++)
      {
          R3BLOG(info, "ALPIDE sensor: " << s + 1);
          for (Int_t c = 0; c < fAlpideCols; c++)
              for (Int_t r = 0; r < fAlpideRows; r++)
              {
                  if (fIn_use[c][r][s] == 0)
                      LOG(info) << "Pixel column: " << c + 1 << ", row: " << r +
     1 << " is skipped";
              }
      }
  */
}

ClassImp(R3BAsyKrabMappingPar);
